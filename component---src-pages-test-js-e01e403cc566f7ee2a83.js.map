{"version":3,"sources":["webpack:///./src/pages/test.js","webpack:///./src/contexts/MenuContext.js","webpack:///./src/contexts/HeaderGradientContext.js","webpack:///./src/hooks/useIsOpened.js","webpack:///./src/components/Providers/Providers.js","webpack:///./src/components/Providers/index.js","webpack:///./src/helpers/utils.js"],"names":["Test","MenuContext","React","createContext","HeaderGradientContext","useIsOpened","useState","isOpened","setIsOpened","handleTogglingIsOpened","Providers","children","menuState","Provider","value","useEffectScroll","ref","func","handler","callback","pos","getBoundingClientRect","y","height","scrollHandler","current","window","addEventListener","removeEventListener","isValidEmail","email","RegExp","test"],"mappings":"4FAAA,4CAceA,UARF,WACX,OACE,kBAAC,IAAD,KACE,wC,+HCLSC,EAFKC,IAAMC,gBCEXC,EAFeF,IAAMC,iB,uECYrBE,EAZK,WAAO,IAAD,EACQC,oBAAS,GAAlCC,EADiB,KACPC,EADO,KAMxB,MAAO,CACLD,WACAE,uBAN6B,WAC7BD,GAAaD,MCaFG,G,UAZG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACbC,EAAYP,IAElB,OACE,kBAAC,IAAYQ,SAAb,CAAsBC,MAAOF,GAAYD,KCR9BD,O,kCCcR,SAASK,EAAgBC,EAAKC,GACnC,IAAMC,EAXD,SAAuBF,EAAKG,GACjC,OAAO,WACL,IAAMC,EAAMJ,EAAIK,wBAChB,GAAID,EAAIE,GAAK,IAAMF,EAAIE,EAAIF,EAAIG,OAC7B,OAAOJ,GAAS,GAElBA,GAAS,IAKKK,CAAcR,EAAIS,QAASR,GAE3C,OADAS,OAAOC,iBAAiB,SAAUT,GAC3B,kBAAMQ,OAAOE,oBAAoB,SAAUV,IAnBpD,kCAsBeW,IAtBf,SAAsBC,GAEpB,OADe,IAAIC,OAAO,oBACZC,KAAKF","file":"component---src-pages-test-js-e01e403cc566f7ee2a83.js","sourcesContent":["// This is a test page and it should not be exist on release. But, please, do not remove it now.\n\nimport React from 'react';\n\nimport Providers from '@components/Providers';\n\nconst Test = () => {\n  return (\n    <Providers>\n      <div>Test</div>\n    </Providers>\n  );\n};\n\nexport default Test;\n","import React from 'react';\n\nconst MenuContext = React.createContext();\n\nexport default MenuContext;\n","import React from 'react';\n\nconst HeaderGradientContext = React.createContext();\n\nexport default HeaderGradientContext;\n","import { useState } from 'react';\n\nconst useIsOpened = () => {\n  const [isOpened, setIsOpened] = useState(false);\n  const handleTogglingIsOpened = () => {\n    setIsOpened(!isOpened);\n  };\n\n  return {\n    isOpened,\n    handleTogglingIsOpened,\n  };\n};\n\nexport default useIsOpened;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MenuContext } from '@contexts';\nimport { useIsOpened } from '@hooks';\n\nconst Providers = ({ children }) => {\n  const menuState = useIsOpened();\n\n  return (\n    <MenuContext.Provider value={menuState}>{children}</MenuContext.Provider>\n  );\n};\n\nProviders.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Providers;\n","import Providers from './Providers';\n\nexport default Providers;\n","function isValidEmail(email) {\n  const regexp = new RegExp(/[^@]+@[^.]+\\..+/g);\n  return regexp.test(email);\n}\n\n// this function takes an element on at the time of finding which callback will be returned\nexport function scrollHandler(ref, callback) {\n  return function() {\n    const pos = ref.getBoundingClientRect();\n    if (pos.y <= 0 && -pos.y < pos.height) {\n      return callback(true);\n    }\n    callback(false);\n  };\n}\n\nexport function useEffectScroll(ref, func) {\n  const handler = scrollHandler(ref.current, func);\n  window.addEventListener('scroll', handler);\n  return () => window.removeEventListener('scroll', handler);\n}\n\nexport default isValidEmail;\n"],"sourceRoot":""}